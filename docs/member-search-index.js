memberSearchIndex = [{"p":"network","c":"graph","l":"addEdge(Integer, Integer)","url":"addEdge(java.lang.Integer,java.lang.Integer)"},{"p":"network","c":"graph","l":"addVertex(Integer)","url":"addVertex(java.lang.Integer)"},{"p":"dataTypes","c":"algorithmOutput","l":"algorithmOutput(algorithmOutput)","url":"%3Cinit%3E(dataTypes.algorithmOutput)"},{"p":"dataTypes","c":"algorithmOutput","l":"algorithmOutput(double, List<Integer>, double, double, double)","url":"%3Cinit%3E(double,java.util.List,double,double,double)"},{"p":"dataTypes","c":"McNemarsOutput","l":"alpha"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"alpha"},{"p":"dataTypes","c":"statisticalOutput","l":"alpha"},{"p":"dataTypes","c":"algorithmOutput","l":"aPrioriUB"},{"p":"dataTypes","c":"solverOutput","l":"bestUB"},{"p":"network","c":"graphTest","l":"buildGraphFromFile()"},{"p":"network","c":"graph","l":"buildGraphFromFile(String, String)","url":"buildGraphFromFile(java.lang.String,java.lang.String)"},{"p":"helper","c":"commonMethodsTest","l":"calculateDelta()"},{"p":"helper","c":"commonMethods","l":"calculateDelta(graph, List<List<Integer>>, List<Integer>, int)","url":"calculateDelta(network.graph,java.util.List,java.util.List,int)"},{"p":"network","c":"graph","l":"changeGraphToLargestConnectedComponent()"},{"p":"network","c":"graphTest","l":"changeGraphToLargestConnectedComponent()"},{"p":"network","c":"graphTest","l":"checkEdgeSet()"},{"p":"simulation","c":"chooseTimeStep","l":"chooseTimeStep()","url":"%3Cinit%3E()"},{"p":"simulation","c":"chooseTimeStep","l":"chooseTimeStep(Map<parameters, List<List<Integer>>>, Map<parameters, List<Integer>>, Map<parameters, Double>)","url":"%3Cinit%3E(java.util.Map,java.util.Map,java.util.Map)"},{"p":"dataTypes","c":"statisticalOutput","l":"CIWidth"},{"p":"helper","c":"commonMethods","l":"commonMethods()","url":"%3Cinit%3E()"},{"p":"helper","c":"commonMethodsTest","l":"commonMethodsTest()","url":"%3Cinit%3E()"},{"p":"analysis","c":"compareHoneypots","l":"compareHoneypots()","url":"%3Cinit%3E()"},{"p":"analysis","c":"compareHoneypots","l":"compareHoneypots(Map<Triplet<parameters, parameters, Integer>, Pair<Double, Double>>, Map<Triplet<parameters, parameters, Integer>, Integer>)","url":"%3Cinit%3E(java.util.Map,java.util.Map)"},{"p":"analysis","c":"McNemarsProcedure","l":"compareMIPAndHeuristic(graph, Map<parameters, algorithmOutput>, Map<parameters, solverOutput>, double, int)","url":"compareMIPAndHeuristic(network.graph,java.util.Map,java.util.Map,double,int)"},{"p":"algorithm","c":"degreeCentrality","l":"degreeCentrality()","url":"%3Cinit%3E()"},{"p":"algorithm","c":"degreeCentrality","l":"degreeCentrality(Map<parameters, algorithmOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"algorithm","c":"degreeCentralityTest","l":"degreeCentralityTest()","url":"%3Cinit%3E()"},{"p":"algorithm","c":"degreeDiscount","l":"degreeDiscount()","url":"%3Cinit%3E()"},{"p":"algorithm","c":"degreeDiscount","l":"degreeDiscount(Map<parameters, algorithmOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"dataTypes","c":"McNemarsOutput","l":"dHat"},{"p":"algorithm","c":"distanceCentrality","l":"distanceCentrality()","url":"%3Cinit%3E()"},{"p":"network","c":"graphTest","l":"dokCoreDecomposition()"},{"p":"network","c":"graph","l":"dokCoreDecomposition(int)"},{"p":"simulation","c":"chooseTimeStep","l":"doSimulationRuns(graph, List<parameters>, int[])","url":"doSimulationRuns(network.graph,java.util.List,int[])"},{"p":"helper","c":"commonMethodsTest","l":"elementwiseMultiplyMatrix()"},{"p":"helper","c":"commonMethods","l":"elementwiseMultiplyMatrix(List<List<Integer>>, List<List<Integer>>)","url":"elementwiseMultiplyMatrix(java.util.List,java.util.List)"},{"p":"dataTypes","c":"McNemarsOutput","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"dataTypes","c":"algorithmOutput","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"dataTypes","c":"parameters","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"dataTypes","c":"solverOutput","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"dataTypes","c":"statisticalOutput","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"network","c":"graph","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"estimateGap(graph, Map<parameters, algorithmOutput>, double, int, int, String)","url":"estimateGap(network.graph,java.util.Map,double,int,int,java.lang.String)"},{"p":"analysis","c":"compareHoneypots","l":"evaluateHoneypotsOnFalseNegativeModel(graph, List<Pair<parameters, parameters>>, int)","url":"evaluateHoneypotsOnFalseNegativeModel(network.graph,java.util.List,int)"},{"p":"dataTypes","c":"parameters","l":"falseNegativeProbability"},{"p":"network","c":"graph","l":"findAverageDegreeOfNodes()"},{"p":"network","c":"graphTest","l":"findAverageDegreeOfNodes()"},{"p":"network","c":"graph","l":"findAverageDistanceBetweenNodes()"},{"p":"network","c":"graphTest","l":"findAverageDistanceBetweenNodes()"},{"p":"network","c":"graphTest","l":"findDistanceBetweenNodes()"},{"p":"network","c":"graph","l":"findDistanceBetweenNodes(int, int)","url":"findDistanceBetweenNodes(int,int)"},{"p":"network","c":"graph","l":"findDistancesBetweenNodes()"},{"p":"network","c":"graphTest","l":"findDistancesBetweenNodes()"},{"p":"network","c":"graph","l":"findMaxDegreeOfNodes()"},{"p":"network","c":"graphTest","l":"findMaxDegreeOfNodes()"},{"p":"network","c":"graph","l":"findMaxDistanceBetweenNodes()"},{"p":"network","c":"graphTest","l":"findMaxDistanceBetweenNodes()"},{"p":"helper","c":"commonMethodsTest","l":"findMaxRowFrequencyNode()"},{"p":"helper","c":"commonMethods","l":"findMaxRowFrequencyNode(List<List<Integer>>, List<Integer>)","url":"findMaxRowFrequencyNode(java.util.List,java.util.List)"},{"p":"helper","c":"commonMethods","l":"findMaxRowFrequencyNodeOld(List<List<Integer>>, List<Integer>)","url":"findMaxRowFrequencyNodeOld(java.util.List,java.util.List)"},{"p":"network","c":"graph","l":"findMinimumNodeLabel()"},{"p":"network","c":"graphTest","l":"findMinimumNodeLabel()"},{"p":"helper","c":"commonMethodsTest","l":"findRowOccurrenceIndices()"},{"p":"helper","c":"commonMethods","l":"findRowOccurrenceIndices(List<List<Integer>>, int)","url":"findRowOccurrenceIndices(java.util.List,int)"},{"p":"network","c":"graph","l":"g"},{"p":"dataTypes","c":"McNemarsOutput","l":"getAlpha()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"getAlpha()"},{"p":"dataTypes","c":"statisticalOutput","l":"getAlpha()"},{"p":"dataTypes","c":"algorithmOutput","l":"getAPrioriUB()"},{"p":"dataTypes","c":"solverOutput","l":"getBestUB()"},{"p":"dataTypes","c":"statisticalOutput","l":"getCIWidth()"},{"p":"helper","c":"commonMethodsTest","l":"getContingencyTable()"},{"p":"helper","c":"commonMethods","l":"getContingencyTable(List<List<Integer>>, List<Integer>, List<Integer>)","url":"getContingencyTable(java.util.List,java.util.List,java.util.List)"},{"p":"network","c":"graph","l":"getCoreNumber(int)"},{"p":"network","c":"graph","l":"getCoreNumbers()"},{"p":"network","c":"graphTest","l":"getDegreeOfNode()"},{"p":"network","c":"graph","l":"getDegreeOfNode(int)"},{"p":"network","c":"graph","l":"getDegrees()"},{"p":"network","c":"graphTest","l":"getDegrees()"},{"p":"dataTypes","c":"McNemarsOutput","l":"getdHat()"},{"p":"network","c":"graph","l":"getEdgeSet()"},{"p":"network","c":"graphTest","l":"getEdgeSet()"},{"p":"network","c":"graphTest","l":"getEdgeSource()"},{"p":"network","c":"graph","l":"getEdgeSource(DefaultEdge)","url":"getEdgeSource(org.jgrapht.graph.DefaultEdge)"},{"p":"network","c":"graphTest","l":"getEdgeTarget()"},{"p":"network","c":"graph","l":"getEdgeTarget(DefaultEdge)","url":"getEdgeTarget(org.jgrapht.graph.DefaultEdge)"},{"p":"dataTypes","c":"parameters","l":"getFalseNegativeProbability()"},{"p":"network","c":"graph","l":"getG()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"getHalfWidth()"},{"p":"dataTypes","c":"algorithmOutput","l":"getHoneypots()"},{"p":"dataTypes","c":"solverOutput","l":"getHoneypots()"},{"p":"<Unnamed>","c":"run","l":"getHoneypotsTimeRunTriplet(int[], int[], int[])","url":"getHoneypotsTimeRunTriplet(int[],int[],int[])"},{"p":"simulation","c":"simulationRuns","l":"getInitialLocationRuns(graph, SplittableRandom, int)","url":"getInitialLocationRuns(network.graph,java.util.SplittableRandom,int)"},{"p":"network","c":"graphTest","l":"getkCore()"},{"p":"network","c":"graph","l":"getkCore(int)"},{"p":"helper","c":"commonMethodsTest","l":"getKHighestDegreeNodes()"},{"p":"helper","c":"commonMethods","l":"getKHighestDegreeNodes(Map<Integer, Integer>, int)","url":"getKHighestDegreeNodes(java.util.Map,int)"},{"p":"dataTypes","c":"McNemarsOutput","l":"getLowerCI()"},{"p":"simulation","c":"simulationRuns","l":"getMapModelNetworkT0RunsFalseNegativeToSimulationRuns()"},{"p":"simulation","c":"simulationRuns","l":"getMapModelNetworkT0RunsFalseNegativeToVirtualDetections()"},{"p":"simulation","c":"chooseTimeStep","l":"getMapParametersToMeanInfectionTime()"},{"p":"simulation","c":"chooseTimeStep","l":"getMapParametersToSimulationRuns()"},{"p":"simulation","c":"chooseTimeStep","l":"getMapParametersToTimeForInfection()"},{"p":"analysis","c":"compareHoneypots","l":"getMapParamsPairToObjectiveValues()"},{"p":"analysis","c":"compareHoneypots","l":"getMapParamsPairToSemiHammingDistance()"},{"p":"optimization","c":"gurobiSolver","l":"getMapParamsToLoadedResults()"},{"p":"optimization","c":"gurobiSolver","l":"getMapParamsToUTC()"},{"p":"dataTypes","c":"statisticalOutput","l":"getMean()"},{"p":"network","c":"graphTest","l":"getNeighborOfNode()"},{"p":"network","c":"graph","l":"getNeighborOfNode(int)"},{"p":"network","c":"graph","l":"getNeighbors()"},{"p":"network","c":"graphTest","l":"getNeighbors()"},{"p":"dataTypes","c":"parameters","l":"getNetworkName()"},{"p":"network","c":"graph","l":"getNetworkName()"},{"p":"dataTypes","c":"parameters","l":"getNumberOfHoneypots()"},{"p":"dataTypes","c":"parameters","l":"getNumberOfSimulationRepetitions()"},{"p":"dataTypes","c":"algorithmOutput","l":"getObjectiveValue()"},{"p":"dataTypes","c":"solverOutput","l":"getObjectiveValue()"},{"p":"algorithm","c":"degreeCentrality","l":"getOutputMap()"},{"p":"algorithm","c":"degreeDiscount","l":"getOutputMap()"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"getOutputMap()"},{"p":"analysis","c":"McNemarsProcedure","l":"getOutputMap()"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"getOutputMap()"},{"p":"analysis","c":"samplingErrors","l":"getOutputMap()"},{"p":"optimization","c":"gurobiSolver","l":"getOutputMap()"},{"p":"dataTypes","c":"parameters","l":"getPercentInfection()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"getPointEstimate()"},{"p":"analysis","c":"samplingErrors","l":"getPointEstimatesAndErrorsForAlgos(graph, Map<parameters, algorithmOutput>, double, int)","url":"getPointEstimatesAndErrorsForAlgos(network.graph,java.util.Map,double,int)"},{"p":"analysis","c":"samplingErrors","l":"getPointEstimatesAndErrorsForMIP(graph, Map<parameters, solverOutput>, double, int)","url":"getPointEstimatesAndErrorsForMIP(network.graph,java.util.Map,double,int)"},{"p":"dataTypes","c":"algorithmOutput","l":"getPosteriorUB()"},{"p":"simulation","c":"simulationRuns","l":"getRandomInfectedNeighbor(graph, SplittableRandom, int)","url":"getRandomInfectedNeighbor(network.graph,java.util.SplittableRandom,int)"},{"p":"dataTypes","c":"statisticalOutput","l":"getReplicationSize()"},{"p":"dataTypes","c":"McNemarsOutput","l":"getSampleSize()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"getSampleSize()"},{"p":"dataTypes","c":"statisticalOutput","l":"getSampleSize()"},{"p":"dataTypes","c":"McNemarsOutput","l":"getSampleStandardError()"},{"p":"analysis","c":"compareHoneypots","l":"getSemiHammingDistance(graph, List<Integer>, List<Integer>)","url":"getSemiHammingDistance(network.graph,java.util.List,java.util.List)"},{"p":"dataTypes","c":"solverOutput","l":"getSolverMessage()"},{"p":"dataTypes","c":"solverOutput","l":"getSolverOptionsUsed()"},{"p":"dataTypes","c":"parameters","l":"getSpreadModelName()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"getStandardError()"},{"p":"dataTypes","c":"statisticalOutput","l":"getStDev()"},{"p":"<Unnamed>","c":"run","l":"getTimeRunPair(int[], int[])","url":"getTimeRunPair(int[],int[])"},{"p":"dataTypes","c":"parameters","l":"getTimeStep()"},{"p":"dataTypes","c":"parameters","l":"getTransmissability()"},{"p":"dataTypes","c":"McNemarsOutput","l":"getUpperCI()"},{"p":"network","c":"graph","l":"getVertexSet()"},{"p":"network","c":"graphTest","l":"getVertexSet()"},{"p":"dataTypes","c":"algorithmOutput","l":"getWallTime()"},{"p":"dataTypes","c":"solverOutput","l":"getWallTimeInSeconds()"},{"p":"network","c":"graph","l":"graph(Graph<Integer, DefaultEdge>, String)","url":"%3Cinit%3E(org.jgrapht.Graph,java.lang.String)"},{"p":"network","c":"graph","l":"graph(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"network","c":"graphTest","l":"graphTest()","url":"%3Cinit%3E()"},{"p":"optimization","c":"gurobiSolver","l":"gurobiSolver()","url":"%3Cinit%3E()"},{"p":"optimization","c":"gurobiSolver","l":"gurobiSolver(Map<parameters, solverOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"optimization","c":"gurobiSolver","l":"gurobiSolver(Map<parameters, solverOutput>, Map<parameters, String>, Map<parameters, Boolean>)","url":"%3Cinit%3E(java.util.Map,java.util.Map,java.util.Map)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"halfWidth"},{"p":"dataTypes","c":"McNemarsOutput","l":"hashCode()"},{"p":"dataTypes","c":"algorithmOutput","l":"hashCode()"},{"p":"dataTypes","c":"parameters","l":"hashCode()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"hashCode()"},{"p":"dataTypes","c":"solverOutput","l":"hashCode()"},{"p":"dataTypes","c":"statisticalOutput","l":"hashCode()"},{"p":"network","c":"graph","l":"hashCode()"},{"p":"network","c":"graph","l":"hasSelfLoops()"},{"p":"network","c":"graphTest","l":"hasSelfLoops()"},{"p":"dataTypes","c":"algorithmOutput","l":"honeypots"},{"p":"dataTypes","c":"solverOutput","l":"honeypots"},{"p":"network","c":"graphTest","l":"initializeAsCirculantGraph()"},{"p":"network","c":"graph","l":"initializeAsCirculantGraph(int, int[], int)","url":"initializeAsCirculantGraph(int,int[],int)"},{"p":"network","c":"graphTest","l":"initializeAsCompleteGraph()"},{"p":"network","c":"graph","l":"initializeAsCompleteGraph(int, int)","url":"initializeAsCompleteGraph(int,int)"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"loadHeuristicResultsFromFile(String)","url":"loadHeuristicResultsFromFile(java.lang.String)"},{"p":"optimization","c":"gurobiSolver","l":"loadResultsFromCSVFile(String)","url":"loadResultsFromCSVFile(java.lang.String)"},{"p":"simulation","c":"simulationRuns","l":"loadRunsFromFile(String)","url":"loadRunsFromFile(java.lang.String)"},{"p":"dataTypes","c":"McNemarsOutput","l":"lowerCI"},{"p":"<Unnamed>","c":"run","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"simulation","c":"simulationRuns","l":"mapModelNetworkT0RunsFalseNegativeToSimulationRuns"},{"p":"simulation","c":"simulationRuns","l":"mapModelNetworkT0RunsFalseNegativeToVirtualDetections"},{"p":"simulation","c":"chooseTimeStep","l":"mapParametersToMeanInfectionTime"},{"p":"simulation","c":"chooseTimeStep","l":"mapParametersToSimulationRuns"},{"p":"simulation","c":"chooseTimeStep","l":"mapParametersToTimeForInfection"},{"p":"analysis","c":"compareHoneypots","l":"mapParamsPairToObjectiveValues"},{"p":"analysis","c":"compareHoneypots","l":"mapParamsPairToSemiHammingDistance"},{"p":"optimization","c":"gurobiSolver","l":"mapParamsToLoadedResults"},{"p":"optimization","c":"gurobiSolver","l":"mapParamsToUTC"},{"p":"dataTypes","c":"McNemarsOutput","l":"McNemarsOutput(double, double, double, double, double, int)","url":"%3Cinit%3E(double,double,double,double,double,int)"},{"p":"analysis","c":"McNemarsProcedure","l":"McNemarsProcedure()","url":"%3Cinit%3E()"},{"p":"analysis","c":"McNemarsProcedure","l":"McNemarsProcedure(Map<parameters, McNemarsOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"dataTypes","c":"statisticalOutput","l":"mean"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"multipleReplicationsProcedure()","url":"%3Cinit%3E()"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"multipleReplicationsProcedure(Map<parameters, statisticalOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"dataTypes","c":"parameters","l":"networkName"},{"p":"network","c":"graph","l":"networkName"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"nodeInMaxRowsGreedyHeuristic()","url":"%3Cinit%3E()"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"nodeInMaxRowsGreedyHeuristic(Map<parameters, algorithmOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristicTest","l":"nodeInMaxRowsGreedyHeuristicTest()","url":"%3Cinit%3E()"},{"p":"dataTypes","c":"parameters","l":"numberOfHoneypots"},{"p":"dataTypes","c":"parameters","l":"numberOfSimulationRepetitions"},{"p":"dataTypes","c":"algorithmOutput","l":"objectiveValue"},{"p":"dataTypes","c":"solverOutput","l":"objectiveValue"},{"p":"algorithm","c":"degreeCentrality","l":"outputMap"},{"p":"algorithm","c":"degreeDiscount","l":"outputMap"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"outputMap"},{"p":"analysis","c":"McNemarsProcedure","l":"outputMap"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"outputMap"},{"p":"analysis","c":"samplingErrors","l":"outputMap"},{"p":"optimization","c":"gurobiSolver","l":"outputMap"},{"p":"dataTypes","c":"parameters","l":"parameters(parameters)","url":"%3Cinit%3E(dataTypes.parameters)"},{"p":"dataTypes","c":"parameters","l":"parameters(String, String, int, int, double, double, int, double)","url":"%3Cinit%3E(java.lang.String,java.lang.String,int,int,double,double,int,double)"},{"p":"dataTypes","c":"parameters","l":"percentInfection"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"pointEstimate"},{"p":"dataTypes","c":"algorithmOutput","l":"posteriorUB"},{"p":"simulation","c":"chooseTimeStep","l":"RA1PCSimulationRuns(graph, List<parameters>, int[])","url":"RA1PCSimulationRuns(network.graph,java.util.List,int[])"},{"p":"simulation","c":"chooseTimeStep","l":"RAEPCSimulationRuns(graph, List<parameters>, int[])","url":"RAEPCSimulationRuns(network.graph,java.util.List,int[])"},{"p":"network","c":"graphTest","l":"removeAllVertices()"},{"p":"network","c":"graph","l":"removeAllVertices(Set<Integer>)","url":"removeAllVertices(java.util.Set)"},{"p":"network","c":"graph","l":"removeSelfLoops()"},{"p":"network","c":"graphTest","l":"removeSelfLoops()"},{"p":"dataTypes","c":"statisticalOutput","l":"replicationSize"},{"p":"<Unnamed>","c":"run","l":"run()","url":"%3Cinit%3E()"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"runSAAUsingHeuristic(graph, simulationRuns, List<parameters>)","url":"runSAAUsingHeuristic(network.graph,simulation.simulationRuns,java.util.List)"},{"p":"algorithm","c":"degreeCentralityTest","l":"runSAAUsingKHighestDegreeNodes()"},{"p":"algorithm","c":"degreeCentrality","l":"runSAAUsingKHighestDegreeNodes(graph, simulationRuns, List<parameters>)","url":"runSAAUsingKHighestDegreeNodes(network.graph,simulation.simulationRuns,java.util.List)"},{"p":"algorithm","c":"degreeDiscount","l":"runSAAUsingKHighestDegreeSingleDiscountNodes(graph, simulationRuns, List<parameters>)","url":"runSAAUsingKHighestDegreeSingleDiscountNodes(network.graph,simulation.simulationRuns,java.util.List)"},{"p":"dataTypes","c":"McNemarsOutput","l":"sampleSize"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"sampleSize"},{"p":"dataTypes","c":"statisticalOutput","l":"sampleSize"},{"p":"dataTypes","c":"McNemarsOutput","l":"sampleStandardError"},{"p":"analysis","c":"samplingErrors","l":"samplingErrors()","url":"%3Cinit%3E()"},{"p":"analysis","c":"samplingErrors","l":"samplingErrors(Map<parameters, samplingErrorsOutput>)","url":"%3Cinit%3E(java.util.Map)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"samplingErrorsOutput(double, double, double, double, int)","url":"%3Cinit%3E(double,double,double,double,int)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"samplingErrorsOutput(samplingErrorsOutput)","url":"%3Cinit%3E(dataTypes.samplingErrorsOutput)"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"serializeResults(String)","url":"serializeResults(java.lang.String)"},{"p":"simulation","c":"simulationRuns","l":"serializeRuns(String)","url":"serializeRuns(java.lang.String)"},{"p":"dataTypes","c":"McNemarsOutput","l":"setAlpha(double)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"setAlpha(double)"},{"p":"dataTypes","c":"statisticalOutput","l":"setAlpha(double)"},{"p":"dataTypes","c":"algorithmOutput","l":"setAPrioriUB(double)"},{"p":"dataTypes","c":"solverOutput","l":"setBestUB(double)"},{"p":"dataTypes","c":"statisticalOutput","l":"setCIWidth(double)"},{"p":"dataTypes","c":"McNemarsOutput","l":"setdHat(double)"},{"p":"dataTypes","c":"parameters","l":"setFalseNegativeProbability(double)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"setHalfWidth(double)"},{"p":"dataTypes","c":"algorithmOutput","l":"setHoneypots(List<Integer>)","url":"setHoneypots(java.util.List)"},{"p":"dataTypes","c":"solverOutput","l":"setHoneypots(List<Integer>)","url":"setHoneypots(java.util.List)"},{"p":"dataTypes","c":"McNemarsOutput","l":"setLowerCI(double)"},{"p":"dataTypes","c":"statisticalOutput","l":"setMean(double)"},{"p":"network","c":"graphTest","l":"setNetworkName()"},{"p":"dataTypes","c":"parameters","l":"setNetworkName(String)","url":"setNetworkName(java.lang.String)"},{"p":"network","c":"graph","l":"setNetworkName(String)","url":"setNetworkName(java.lang.String)"},{"p":"dataTypes","c":"parameters","l":"setNumberOfHoneypots(int)"},{"p":"dataTypes","c":"parameters","l":"setNumberOfSimulationRepetitions(int)"},{"p":"dataTypes","c":"algorithmOutput","l":"setObjectiveValue(double)"},{"p":"dataTypes","c":"solverOutput","l":"setObjectiveValue(double)"},{"p":"dataTypes","c":"parameters","l":"setPercentInfection(double)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"setPointEstimate(double)"},{"p":"dataTypes","c":"algorithmOutput","l":"setPosteriorUB(double)"},{"p":"dataTypes","c":"statisticalOutput","l":"setReplicationSize(int)"},{"p":"dataTypes","c":"McNemarsOutput","l":"setSampleSize(int)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"setSampleSize(int)"},{"p":"dataTypes","c":"statisticalOutput","l":"setSampleSize(int)"},{"p":"dataTypes","c":"McNemarsOutput","l":"setSampleStandardError(double)"},{"p":"dataTypes","c":"solverOutput","l":"setSolverMessage(String)","url":"setSolverMessage(java.lang.String)"},{"p":"dataTypes","c":"solverOutput","l":"setSolverOptionsUsed(Map<String, String>)","url":"setSolverOptionsUsed(java.util.Map)"},{"p":"dataTypes","c":"parameters","l":"setSpreadModelName(String)","url":"setSpreadModelName(java.lang.String)"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"setStandardError(double)"},{"p":"dataTypes","c":"statisticalOutput","l":"setStDev(double)"},{"p":"dataTypes","c":"parameters","l":"setTimeStep(int)"},{"p":"dataTypes","c":"parameters","l":"setTransmissability(double)"},{"p":"dataTypes","c":"McNemarsOutput","l":"setUpperCI(double)"},{"p":"dataTypes","c":"algorithmOutput","l":"setWallTime(double)"},{"p":"dataTypes","c":"solverOutput","l":"setWallTimeInSeconds(double)"},{"p":"simulation","c":"simulationRuns","l":"simulateOnlyNecessaryRA1PCRuns(graph, List<Pair<Integer, Integer>>, double, double, int[])","url":"simulateOnlyNecessaryRA1PCRuns(network.graph,java.util.List,double,double,int[])"},{"p":"simulation","c":"simulationRuns","l":"simulateOnlyNecessaryRAEPCRuns(graph, List<Pair<Integer, Integer>>, double, double, int[])","url":"simulateOnlyNecessaryRAEPCRuns(network.graph,java.util.List,double,double,int[])"},{"p":"simulation","c":"simulationRuns","l":"simulateOnlyNecessaryTN11CRuns(graph, List<Pair<Integer, Integer>>, double, int[])","url":"simulateOnlyNecessaryTN11CRuns(network.graph,java.util.List,double,int[])"},{"p":"simulation","c":"simulationRuns","l":"simulateRA1PCRuns(graph, List<Pair<Integer, Integer>>, double, double, int[])","url":"simulateRA1PCRuns(network.graph,java.util.List,double,double,int[])"},{"p":"simulation","c":"simulationRuns","l":"simulateRAEPCRuns(graph, List<Pair<Integer, Integer>>, double, double, int[])","url":"simulateRAEPCRuns(network.graph,java.util.List,double,double,int[])"},{"p":"simulation","c":"simulationRuns","l":"simulateTN11CRuns(graph, List<Pair<Integer, Integer>>, double, int[])","url":"simulateTN11CRuns(network.graph,java.util.List,double,int[])"},{"p":"dataTypes","c":"simulationOutput","l":"simulationOutput()","url":"%3Cinit%3E()"},{"p":"simulation","c":"simulationRuns","l":"simulationRuns()","url":"%3Cinit%3E()"},{"p":"simulation","c":"simulationRuns","l":"simulationRuns(Map<Sextet<String, String, Integer, Integer, Double, Double>, List<List<Integer>>>, Map<Sextet<String, String, Integer, Integer, Double, Double>, List<List<Integer>>>)","url":"%3Cinit%3E(java.util.Map,java.util.Map)"},{"p":"dataTypes","c":"solverOutput","l":"solverMessage"},{"p":"dataTypes","c":"solverOutput","l":"solverOptionsUsed"},{"p":"dataTypes","c":"solverOutput","l":"solverOutput()","url":"%3Cinit%3E()"},{"p":"dataTypes","c":"solverOutput","l":"solverOutput(double, double, List<Integer>, double, Map<String, String>, String)","url":"%3Cinit%3E(double,double,java.util.List,double,java.util.Map,java.lang.String)"},{"p":"dataTypes","c":"solverOutput","l":"solverOutput(solverOutput)","url":"%3Cinit%3E(dataTypes.solverOutput)"},{"p":"optimization","c":"gurobiSolver","l":"solveSAA(graph, simulationRuns, List<parameters>, int, int, String)","url":"solveSAA(network.graph,simulation.simulationRuns,java.util.List,int,int,java.lang.String)"},{"p":"optimization","c":"gurobiSolver","l":"solveSAALPRelaxation(graph, simulationRuns, List<parameters>, int, int, String)","url":"solveSAALPRelaxation(network.graph,simulation.simulationRuns,java.util.List,int,int,java.lang.String)"},{"p":"optimization","c":"gurobiSolver","l":"solveSAAOnlyNecessaryOnes(graph, simulationRuns, List<parameters>, int, int, String)","url":"solveSAAOnlyNecessaryOnes(network.graph,simulation.simulationRuns,java.util.List,int,int,java.lang.String)"},{"p":"dataTypes","c":"parameters","l":"spreadModelName"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"standardError"},{"p":"dataTypes","c":"statisticalOutput","l":"statisticalOutput(double, double, double, double, int, int)","url":"%3Cinit%3E(double,double,double,double,int,int)"},{"p":"dataTypes","c":"statisticalOutput","l":"statisticalOutput(statisticalOutput)","url":"%3Cinit%3E(dataTypes.statisticalOutput)"},{"p":"dataTypes","c":"statisticalOutput","l":"stDev"},{"p":"network","c":"graphTest","l":"testEquals()"},{"p":"network","c":"graphTest","l":"testHashCode()"},{"p":"dataTypes","c":"parameters","l":"timeStep"},{"p":"simulation","c":"chooseTimeStep","l":"TN1PCSimulationRuns(graph, List<parameters>, int[])","url":"TN1PCSimulationRuns(network.graph,java.util.List,int[])"},{"p":"algorithm","c":"degreeCentrality","l":"toString()"},{"p":"algorithm","c":"degreeDiscount","l":"toString()"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"toString()"},{"p":"analysis","c":"McNemarsProcedure","l":"toString()"},{"p":"analysis","c":"compareHoneypots","l":"toString()"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"toString()"},{"p":"analysis","c":"samplingErrors","l":"toString()"},{"p":"dataTypes","c":"McNemarsOutput","l":"toString()"},{"p":"dataTypes","c":"algorithmOutput","l":"toString()"},{"p":"dataTypes","c":"parameters","l":"toString()"},{"p":"dataTypes","c":"samplingErrorsOutput","l":"toString()"},{"p":"dataTypes","c":"solverOutput","l":"toString()"},{"p":"dataTypes","c":"statisticalOutput","l":"toString()"},{"p":"network","c":"graph","l":"toString()"},{"p":"optimization","c":"gurobiSolver","l":"toString()"},{"p":"simulation","c":"chooseTimeStep","l":"toString()"},{"p":"dataTypes","c":"parameters","l":"transmissability"},{"p":"dataTypes","c":"McNemarsOutput","l":"upperCI"},{"p":"dataTypes","c":"algorithmOutput","l":"wallTime"},{"p":"dataTypes","c":"solverOutput","l":"wallTimeInSeconds"},{"p":"network","c":"graph","l":"writeNetworkInfoToCSV(String, boolean)","url":"writeNetworkInfoToCSV(java.lang.String,boolean)"},{"p":"algorithm","c":"degreeCentrality","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"algorithm","c":"degreeDiscount","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"algorithm","c":"nodeInMaxRowsGreedyHeuristic","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"analysis","c":"McNemarsProcedure","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"analysis","c":"compareHoneypots","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"analysis","c":"multipleReplicationsProcedure","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"analysis","c":"samplingErrors","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"optimization","c":"gurobiSolver","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"},{"p":"simulation","c":"chooseTimeStep","l":"writeToCSV(String, boolean)","url":"writeToCSV(java.lang.String,boolean)"}]